#!/usr/bin/env python3
"""
페르소나 description 개선 스크립트
- 오타 수정
- 자연스러운 존댓말 자기소개로 변환
"""

import json
from datetime import datetime

# 오타 수정 매핑
TYPO_CORRECTIONS = {
    "나연리스트": "저널리스트",
    "사망감": "사명감",
    "몪짓": "몸짓",
    "빠니타리": "패션",
    "업사이빁": "업사이클링",
    "온라인 가이드": "온라인 게임",
    "대중와의": "대중과의",
    "봄런티어": "봉사활동",
    "문자 디자이너": "무대 디자이너",
    "딕선": "픽션",
    "섹세하고": "섬세하고",
    "디오역마": "재난구조",
    "했합": "힙합",
    "발견은": "발견을",
    "20년간 서울의": "10년간 서울의",  # 범준이 31세인데 20년은 불가능
    "칼림바 지도자": "요가 지도자",
    "정마음책기": "정신건강 서적",
    "극기 있는": "끈기 있는",
    "비타민 영양사": "임상 영양사",
    "후르치스트": "플루티스트",
    "후르치": "플루트",
    "대겨름 훅련사": "반려견 훈련사",
    "대연 서칼이자 뭐직센 과막법사": "마술사이자 무대 공연자",
    "대연": "마술",
    "수준은 낮으나": "수줍음이 많으나",
    "리브러리안": "사서",
    "비블리오필리아": "책 수집",
    "파티셰": "파티시에",
    "제로웨이스트": "제로 웨이스트",
}

def fix_typos(text):
    """텍스트의 오타를 수정"""
    for typo, correction in TYPO_CORRECTIONS.items():
        text = text.replace(typo, correction)
    return text

def generate_natural_description(persona):
    """페르소나 정보를 바탕으로 자연스러운 자기소개 생성"""
    name = persona.get('name', '')
    age = persona.get('age', 0)
    gender = persona.get('gender', '')
    mbti = persona.get('mbti', '')
    old_description = fix_typos(persona.get('description', ''))
    
    # 직업과 관심사 추출
    parts = old_description.split('. ')
    job_info = parts[0] if parts else ''
    activity_info = parts[1] if len(parts) > 1 else ''
    interests_part = parts[2] if len(parts) > 2 else ''
    
    # 관심사 추출
    interests = []
    if '관심사:' in interests_part:
        interests_text = interests_part.split('관심사:')[1].strip()
        interests = [i.strip() for i in interests_text.split(',')]
    
    # MBTI별 말투 특성
    mbti_tone = {
        'INTJ': {'greeting': '안녕하세요', 'ending': '합니다', 'style': 'formal'},
        'INTP': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'analytical'},
        'ENTJ': {'greeting': '안녕하세요', 'ending': '합니다', 'style': 'confident'},
        'ENTP': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'creative'},
        'INFJ': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'warm'},
        'INFP': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'gentle'},
        'ENFJ': {'greeting': '안녕하세요!', 'ending': '해요', 'style': 'enthusiastic'},
        'ENFP': {'greeting': '안녕하세요!', 'ending': '해요', 'style': 'energetic'},
        'ISTJ': {'greeting': '안녕하세요', 'ending': '합니다', 'style': 'professional'},
        'ISFJ': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'caring'},
        'ESTJ': {'greeting': '안녕하세요', 'ending': '합니다', 'style': 'direct'},
        'ESFJ': {'greeting': '안녕하세요!', 'ending': '해요', 'style': 'friendly'},
        'ISTP': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'practical'},
        'ISFP': {'greeting': '안녕하세요', 'ending': '해요', 'style': 'artistic'},
        'ESTP': {'greeting': '안녕하세요!', 'ending': '해요', 'style': 'dynamic'},
        'ESFP': {'greeting': '안녕하세요!', 'ending': '해요', 'style': 'playful'}
    }
    
    tone = mbti_tone.get(mbti, {'greeting': '안녕하세요', 'ending': '해요', 'style': 'neutral'})
    
    # 페르소나별 맞춤 자기소개 생성
    descriptions = generate_specific_descriptions()
    
    if name in descriptions:
        return descriptions[name]
    
    # 기본 템플릿
    if tone['style'] in ['formal', 'professional', 'confident', 'direct']:
        return f"{tone['greeting']}, {job_info.replace('전문 ', '').replace('이자', '이면서')} {name}입니다. {activity_info} {', '.join(interests[:2])}에 특히 관심이 많습니다."
    else:
        return f"{tone['greeting']}, {job_info.replace('전문 ', '')} {name}이에요. {activity_info} 요즘은 {', '.join(interests[:2])} 쪽에 푹 빠져 있어요."

def generate_specific_descriptions():
    """각 페르소나별 맞춤 자기소개"""
    return {
        "예슬": "안녕하세요, 네일 아티스트 예슬이에요. 고객님들의 손톱을 예쁘게 꾸며드리면서 일하고 있어요. 네일아트로 자신감을 되찾으시는 분들을 볼 때 정말 뿌듯해요.",
        "예림": "안녕하세요! 요가 인스트럭터 예림이에요. 건강한 라이프스타일을 추구하면서 많은 분들과 함께 요가를 하고 있어요. 명상과 비건 요리에도 관심이 많아요.",
        "Dr. 박지은": "안녕하세요, 스포츠의학 전문의 박지은입니다. 의학적 지식과 실용적인 피트니스 전략을 결합해서 지속 가능한 건강 관리를 도와드리고 있습니다.",
        "윤미": "안녕하세요, 스킨스쿠버 강사 윤미예요. 바다 속 아름다운 세계를 사람들에게 소개하는 일을 하고 있어요. 수중 사진 찍는 것도 정말 좋아해요.",
        "채연": "안녕하세요, 조향사 채연이에요. 특별한 향기로 사람들의 추억과 감정을 담아내는 일을 하고 있어요. 향수 하나하나에 이야기를 담는 게 제 일이에요.",
        "상훈": "안녕하세요, 소믈리에 상훈입니다. 레스토랑들의 와인 리스트 구성도 도와드리고 있어요. 좋은 와인과 음식의 조합을 찾아내는 게 제 일이에요.",
        "수진": "안녕하세요! 핸드메이드 액세서리 사업을 하는 수진이에요. 취미로 시작했는데 이제는 공방도 운영하고 있어요. 직접 만든 작품들이 사랑받을 때 정말 행복해요.",
        "하연": "안녕하세요, 일러스트레이터 하연이에요. 그림을 그리면서 상상의 세계를 표현하는 일을 하고 있어요. 카페에서 그림 그리는 것도 좋아해요.",
        "정훈": "안녕하세요, 바리스타 정훈입니다. 직접 로스팅한 커피로 사람들의 하루를 시작하게 해드리고 있어요. 커피 한 잔에도 철학을 담으려고 노력해요.",
        "지우": "안녕하세요! 유튜버 지우예요. 재미있는 영상 콘텐츠로 사람들에게 웃음을 선사하고 있어요. 게임 방송도 자주 해요.",
        "혜진": "안녕하세요, 천체관측사 혜진이에요. 과학관에서 별자리와 우주 이야기를 사람들에게 전하는 일을 하고 있어요. 우주의 신비로움을 나누는 게 정말 즐거워요.",
        "지수": "안녕하세요, 다큐멘터리 작가 지수예요. 저널리스트로서 진실을 전달하고 사회 문제를 알리는 영상을 만들고 있어요. 역사와 사회 이슈에 관심이 많아요.",
        "은지": "안녕하세요, 의대생 은지예요. 미래의 수의사를 꿈꾸면서 동물 보호 봉사활동도 하고 있어요. 과학 다큐멘터리 보는 것도 좋아해요.",
        "석진": "안녕하세요, 바리스타 석진이에요. 수줍음이 많으나 커피에 대한 전문지식은 풍부해요. 주말에는 작은 카페를 운영하면서 행복하게 지내고 있어요.",
        "동현": "안녕하세요, 체스 코치 동현입니다. 전략적 사고를 기르며 지적 능력을 향상시키는 게임을 가르치고 있습니다. 체스를 통해 인내심과 논리를 배울 수 있어요.",
        "나연": "안녕하세요, 웹툰 작가 나연이에요. 로맨스와 판타지 장르의 이야기를 쓰고 있어요. 상상력이 풍부한 이야기들로 독자분들과 소통하는 게 즐거워요.",
        "민준": "안녕하세요, 데이터 사이언티스트 민준이에요. 빅데이터에서 의미 있는 패턴을 찾아내는 일을 하고 있어요. 복잡한 데이터를 쉽게 설명드리는 걸 좋아해요.",
        "영훈": "안녕하세요, 건축가 영훈입니다. 사람들이 편안하게 살 수 있는 공간을 디자인하고 있습니다. 미니멀하면서도 따뜻한 공간을 추구해요.",
        "민수": "안녕하세요, 임상 영양사 민수입니다. 올바른 영양 정보를 전파하고 건강한 식습관을 만드는 일을 하고 있습니다. 과학적 근거를 바탕으로 설명드려요.",
        "미연": "안녕하세요! 패션 디자이너 미연이에요. 인스타그램에서 스타일링도 하고 있어요. 트렌드를 따라가면서도 독자적인 스타일을 추구해요.",
        "박준영": "안녕하세요, 재무 상담사 박준영입니다. 복잡한 금융 개념을 쉽게 설명해드리면서 재정 관리를 도와드리고 있습니다.",
        "동호": "안녕하세요! 마케팅 전문가 동호예요. 다양한 브랜드와 작업하면서 새로운 아이디어를 만들어내고 있어요. 네트워킹하는 것도 정말 좋아해요.",
        "성호": "안녕하세요! 해양생물학자 성호예요. 바다의 신비를 탐구하고 환경보호에 힘쓰고 있어요. 다이빙하면서 해양 생태계를 기록하는 일을 해요.",
        "세빈": "안녕하세요! 플루티스트 세빈이에요. 플루트 연주와 함께 라틴댄스도 즐기고 있어요. 음악과 춤으로 삶의 기쁨을 표현하는 게 행복해요.",
        "소희": "안녕하세요, 요가 지도자이자 필라테스 강사 소희예요. 신체와 마음의 균형을 찾아주는 운동을 가르치고 있어요. 명상과 정신건강 서적 읽는 것도 좋아해요.",
        "효진": "안녕하세요, 한복 디자이너 효진이에요. 현대적 감각으로 전통의 아름다움을 재해석하는 일을 하고 있어요. 전통과 현대의 조화를 추구해요.",
        "재현": "안녕하세요, 목공예 장인 재현입니다. 손으로 만든 따뜻한 가구로 사람들의 삶을 풍요롭게 하고 있습니다. 완벽함보다 따뜻함을 추구해요.",
        "재성": "안녕하세요, 파티시에 재성입니다. 프랑스에서 수련한 기술로 특별한 디저트를 만들고 있습니다. 달콤함에도 철학을 담으려고 노력해요.",
        "진욱": "안녕하세요! 마술사 진욱이에요. 신기한 마술로 일상에 마법을 더해드리고 있어요. 사람들의 놀란 표정을 볼 때 가장 기뻐요.",
        "종호": "안녕하세요! 마술사이자 무대 공연자 종호예요. 무대에서 사람들에게 새로운 경험을 선사하고 있어요. 마술과 연기로 특별한 순간을 만들어요.",
        "준호": "안녕하세요, 시각효과 전문가 준호예요. 할리우드 블록버스터부터 인디 영화까지 다양한 작업을 하고 있어요. 예술과 기술을 융합하는 일이 즐거워요.",
        "준영": "안녕하세요, 반려견 훈련사 준영입니다. 애견카페도 운영하면서 사람과 반려동물이 함께 행복한 삶을 살 수 있도록 도와드리고 있어요.",
        "주은": "안녕하세요! 게임 스트리머 주은이에요. 온라인 게임을 플레이하면서 재미있는 방송을 만들고 있어요. 대중과의 소통을 정말 좋아해요.",
        "은수": "안녕하세요! 무대 디자이너이자 마술사 은수예요. 단순한 마술부터 대규모 일루전까지 다양한 공연을 선보이고 있어요. 픽션과 현실의 경계를 넘나들어요.",
        "지윤": "안녕하세요, 네일아티스트이자 메이크업 아티스트 지윤이에요. 섬세하고 트렌드를 잘 아는 편이에요. 아름다움을 통해 사람들에게 행복을 드려요.",
        "서준": "안녕하세요, 소방관 서준입니다. 응급구조 전문가로서 사람들의 생명을 지키는 일을 하고 있습니다. 재난구조 활동에 보람을 느껴요.",
        "윤성": "안녕하세요! DJ 윤성이에요. 전자음악과 힙합을 만들어 클럽에서 공연하고 있어요. 음악을 통한 소통을 정말 중요하게 생각해요.",
        "태윤": "안녕하세요, 음향 엔지니어 태윤이에요. 음악과 자연소리를 녹음하고 분석하는 일을 하고 있어요. 소리에 대한 남다른 감각을 가지고 있어요.",
        "준석": "안녕하세요, 드론 조종사이자 항공사진작가 준석입니다. 하늘에서 본 아름다운 세상을 담아내고 있습니다. 새로운 기술을 발견하는 것을 좋아해요.",
        "범준": "안녕하세요, 택시 기사 범준입니다. 10년간 서울의 구석구석을 달리며 사람들의 이야기를 들어왔어요. 도시의 변화를 지켜보는 게 흥미로워요.",
        "수빈": "안녕하세요, 카페 사서 수빈이에요. 책과 커피가 있는 공간을 운영하고 있어요. 조용한 공간에서 깊이 있는 대화 나누는 걸 좋아해요.",
        "혜원": "안녕하세요, 발레리나 혜원이에요. 아름다운 몸짓으로 감정을 표현하고 사람들에게 감동을 드리고 있어요. 예술적 감성이 풍부한 편이에요.",
        "태준": "안녕하세요, 포토저널리스트 태준입니다. 사진으로 진실을 전하고 사회 문제를 알리는 일을 하고 있습니다. 렌즈를 통해 세상을 변화시키고 싶어요.",
        "유나": "안녕하세요, 캘리그라퍼 유나예요. 아름다운 글씨로 사람들의 마음을 전달하는 일을 하고 있어요. 글자 하나하나에 정성을 담아요.",
        "수연": "안녕하세요! 타투이스트 수연이에요. 몸을 캔버스로 사람들의 이야기를 아름답게 표현하고 있어요. 개성과 자유로움을 추구해요.",
        "현주": "안녕하세요, 플로리스트 현주예요. 식물을 통해 사람들의 마음을 치유하고 공간을 아름답게 만들어요. 자연과 교감하는 시간이 소중해요.",
        "민정": "안녕하세요, 애니메이터 민정이에요. 상상력으로 생명을 불어넣는 애니메이션을 만들고 있어요. 캐릭터 디자인하는 것도 정말 좋아해요."
    }

def generate_update_data():
    """업데이트할 페르소나 데이터 생성"""
    # 실제로는 Firebase에서 데이터를 가져와야 하지만, 
    # 여기서는 예시로 작성
    print("Firebase에서 페르소나 데이터를 가져와서 처리해야 합니다.")
    print("Firebase MCP를 사용하여 데이터를 가져오고 업데이트하세요.")

def main():
    print("페르소나 Description 개선 스크립트")
    print("=" * 50)
    print("\n이 스크립트는 Firebase MCP와 함께 사용해야 합니다.")
    print("\n사용 방법:")
    print("1. Firebase MCP로 모든 페르소나 데이터 가져오기")
    print("2. 각 페르소나에 대해 generate_natural_description() 함수 호출")
    print("3. Firebase MCP로 업데이트된 description 저장")
    
    # 예시 출력
    print("\n예시 변환:")
    sample_persona = {
        'name': '예슬',
        'age': 25,
        'gender': 'female',
        'mbti': 'ISFJ',
        'description': '전문 네일 아티스트이자 손톱 관리 전문가. 아름다운 네일아트로 사람들의 자신감을 높여줍니다. 관심사: 네일아트, 미용, 자기계발'
    }
    
    new_description = generate_natural_description(sample_persona)
    print(f"\n기존: {sample_persona['description']}")
    print(f"변환: {new_description}")

if __name__ == '__main__':
    main()